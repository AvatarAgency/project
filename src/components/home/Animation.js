import { Box } from '@mui/material';
import React, { useRef } from 'react';
import FeaturedTitle from './FeaturedTitle';
import { motion, useScroll, useTransform } from 'framer-motion';
import { useGLTF, Environment, ContactShadows } from '@react-three/drei';
import { Canvas, useFrame } from '@react-three/fiber';
import * as THREE from 'three';
import useWindowSize from '../useWindowSize';

function Model(props) {
  const group = useRef();
  /*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  author: JasperTobias (https://sketchfab.com/JasperTobias)
  license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
  source: https://sketchfab.com/3d-models/lowpoly-earth-ce0cce9b528b47c7984bf0b2b600d705
  title: LowPoly Earth
  */
  const { nodes, materials } = useGLTF('/earth.gltf');
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, open ? Math.cos(t / 10) / 10 + 0.25 : 0, 0.7);
    group.current.rotation.y += 0.01;
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, open ? Math.sin(t / 10) / 10 : 0, 0.1);
    group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, open ? (4 + Math.sin(t)) / 15 : -4.3, 0.1);
  });
  return (
    <group ref={group} rotation={[-Math.PI / 2, 0, Math.PI]} {...props} dispose={null}>
      <mesh geometry={nodes['URF-Height_Lampd_Ice_0'].geometry} material={materials.Lampd_Ice} />
      <mesh geometry={nodes['URF-Height_watr_0'].geometry} material={materials.watr} material-roughness={0} />
      <mesh geometry={nodes['URF-Height_Lampd_0'].geometry} material={materials.Lampd} material-color='lightgreen'>
        <group position={[0, 0, 1.3]} rotation={[0, 0, Math.PI]}></group>
      </mesh>
    </group>
  );
}

const Animation = () => {
  const features = [
    {
      title: 'Use your calendar as a todo list',
      id: 'todo-list',
    },
    {
      title: 'Color your calendar to organize',
      id: 'colors',
    },
    {
      title: 'Instantly know if someone is available',
      id: 'availability',
    },
    {
      title: 'Track what you listened to when',
      id: 'music',
    },
    {
      title: 'Send scheduling links guests love',
      id: 'scheduling-links',
    },
    {
      title: 'Always know what your team is up to',
      id: 'team',
    },
  ];
  const containerRef = useRef(null);
  const size = useWindowSize(0);

  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ['start end', 'end end'],
  });
  const opacity = useTransform(scrollYProgress, [0, 0.2], [0, 1]);

  return (
    <motion.section style={{ opacity, transition: '1s ease-in' }}>
      <Box display={'flex'} width={'100%'} minHeight={'240vh'} alignItems={'start'}>
        <Box width={'100%'} py={55}>
          {features.map((feature) => (
            <Box ml={2} py={5} key={feature.id}>
              <FeaturedTitle>{feature.title}</FeaturedTitle>
            </Box>
          ))}
        </Box>
        <Box display={'flex'} position={'sticky'} width={'100%'} top={0} height={'100vh'} alignItems={'center'} justifyContent={'center'}>
          <Box width={'80%'} height={'50%'} sx={{ alignItems: 'start', display: 'flex', position: 'relative' }}>
            <Box width={'100%'} height={'100%'} backgroundColor='grey' position={'absolute'} sx={{ filter: 'blur(1.5rem)' }}></Box>
            <Canvas camera={{ position: [5, 0, 0], fov: size.width <= 600 ? 70 : size.width >= 768 ? 45 : size.width >= 1280 ? 35 : size.width >= 1024 ? 40 : 50}}>
              <ambientLight intensity={0.5} />
              <Model position={[0, 0.25, 0]} />
              <Environment preset='city' />
              <ContactShadows frames={1} scale={5} position={[0, -1, 0]} far={1} blur={5} opacity={0.5} color='#204080' />
            </Canvas>
          </Box>
        </Box>
      </Box>
    </motion.section>
  );
};

export default Animation;
